// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package watcher

import (
	"context"
	"github.com/jm199seo/dhg_bot/pkg/colly"
	"github.com/jm199seo/dhg_bot/pkg/discord"
	"github.com/jm199seo/dhg_bot/pkg/loa_api"
	"github.com/jm199seo/dhg_bot/pkg/mongo"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func InitializeWatcher(ctx context.Context, cfg *viper.Viper) (*Server, func(), error) {
	config, err := ProvideConfigFromEnvironment(cfg)
	if err != nil {
		return nil, nil, err
	}
	loa_apiConfig, err := loa_api.ProvideConfigFromEnvironment(cfg)
	if err != nil {
		return nil, nil, err
	}
	client, err := loa_api.NewClient(loa_apiConfig)
	if err != nil {
		return nil, nil, err
	}
	discordConfig, err := discord.ProvideConfigFromEnvironment(cfg)
	if err != nil {
		return nil, nil, err
	}
	mongoConfig, err := mongo.ProvideConfigFromEnvironment(cfg)
	if err != nil {
		return nil, nil, err
	}
	mongoClient, cleanup, err := mongo.NewClient(mongoConfig)
	if err != nil {
		return nil, nil, err
	}
	collyConfig, err := colly.ProvideConfigFromEnvironment(cfg)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	collyClient, cleanup2, err := colly.NewClient(ctx, collyConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	discordClient, cleanup3, err := discord.NewClient(discordConfig, mongoClient, client, collyClient)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server, cleanup4, err := NewServer(config, client, discordClient, mongoClient)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return server, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
